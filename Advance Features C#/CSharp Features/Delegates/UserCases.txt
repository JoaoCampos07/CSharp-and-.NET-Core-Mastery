1 Case : 
For example, I have a Base Controller that is responsible to process every request that comes from every child controller. 
For that child controllers should use : ProcessQueryAsync() or ProcessCommandAsync().
In this base controller, is a nuget, but the devs that use this Nuget would like to be able to configure some callback that would be call, IF the request is process
sucessfully. So... :




2 case :
For example, in a case of the Nuget/Framework, allow the user to pass any kind of method that follows some signature. 
Let's check the method Where(Func<TSource,bool> predicate) from LINQ : 

https://github.com/microsoft/referencesource/blob/master/System.Core/System/Linq/Enumerable.cs

public static partial class Enumerable
    {
        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) {
            if (source == null) throw Error.ArgumentNull("source");
            if (predicate == null) throw Error.ArgumentNull("predicate");
            if (source is Iterator<TSource>) return ((Iterator<TSource>)source).Where(predicate);
            if (source is TSource[]) return new WhereArrayIterator<TSource>((TSource[])source, predicate);
            if (source is List<TSource>) return new WhereListIterator<TSource>((List<TSource>)source, predicate);
            return new WhereEnumerableIterator<TSource>(source, predicate);
        }

        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate) {
            if (source == null) throw Error.ArgumentNull("source");
            if (predicate == null) throw Error.ArgumentNull("predicate");
            return WhereIterator<TSource>(source, predicate);
        }

        static IEnumerable<TSource> WhereIterator<TSource>(IEnumerable<TSource> source, Func<TSource, int, bool> predicate) {
            int index = -1;
             foreach (TSource element in source) { // Just like a Linked Lis, we are loop throught the Sequence, or linked objs applying the predicate to which one of them and                                                      // returning them  one by one if the condition verify !
                checked { index++; }
                if (predicate(element, index)) yield return element;
            }
        }
(...)
